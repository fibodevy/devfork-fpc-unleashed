name: Linux

on:
  workflow_dispatch:
  workflow_call:

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout HEAD only
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Fetch 'nightly' tag only
        run: git fetch origin refs/tags/nightly:refs/tags/nightly

      - name: Check for changes since nightly
        id: check
        run: |
          if git rev-parse nightly >/dev/null 2>&1; then
            nightly_commit=$(git rev-list -n 1 nightly)
            head_commit=$(git rev-parse HEAD)
            echo "Nightly tag commit: $nightly_commit"
            echo "HEAD commit: $head_commit"

            if [ "$nightly_commit" = "$head_commit" ]; then
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should_build == 'true'

    steps:
      - name: Install bootstrap compiler
        run: apt-get install fpc-3.2.2

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Build FPC x86_64 (native)
        run: |
          make distclean
          make all CPU_TARGET=x86_64 PP=/usr/lib/fpc/3.2.2/ppcx64

      - name: Build FPC x86_64 (utils)
        run: make utils CPU_TARGET=x86_64 PP=compiler/ppcx64

      - name: Install FPC x86_64
        run: make install CPU_TARGET=x86_64 INSTALL_PREFIX=$PWD/fpc PP=compiler/ppcx64

      - name: Build i386 cross-compiler
        run: |
          make crossinstall OS_TARGET=linux CPU_TARGET=i386 INSTALL_PREFIX=$PWD/fpc PP=compiler/ppcx64 OPT="-dFPC_SOFT_FPUX80"

      - name: Package artifacts
        run: |
          zip -r fpc-unleashed.zip fpc
          cp fpc/bin/x86_64-linux/ppcx64 .
          cp fpc/bin/i386-linux/ppcross386 .

      - name: Upload fpc-unleashed.zip
        uses: actions/upload-artifact@v4
        with:
          name: fpc-unleashed.zip
          path: fpc-unleashed.zip

      - name: Upload ppcx64
        uses: actions/upload-artifact@v4
        with:
          name: ppcx64
          path: ppcx64

      - name: Upload ppcross386
        uses: actions/upload-artifact@v4
        with:
          name: ppcross386
          path: ppcross386

      - name: Prepare release body
        run: |
          ts=$(TZ=Europe/Berlin date +"%Y-%m-%d %H:%M:%S Europe/Berlin")
          echo "TAG=nightly" >> $GITHUB_ENV
          echo "NAME=FPC Unleashed nightly" >> $GITHUB_ENV
          {
            echo "FPC Unleashed nightly build"
            echo
            echo "Generated from commit: $GITHUB_SHA"
            echo "Build time: $ts"
            echo
            echo "Contents:"
            echo "- Compiler (primary): ppcx64 (x86_64-linux)"
            echo "- Cross-compiler: ppcross386 (i386-linux)"
            echo "- RTL and units for:"
            echo "  - x86_64-linux"
            echo "  - i386-linux"
            echo
            echo "This is an automated build generated by GitHub Actions."
          } > release-body.txt

      - name: Update tag
        uses: richardsimko/update-tag@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: fpc-unleashed.zip,ppcx64,ppcross386
          tag: ${{ env.TAG }}
          name: ${{ env.NAME }}
          bodyFile: release-body.txt
          prerelease: true
          allowUpdates: true

  skip:
    runs-on: ubuntu-latest
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should_build == 'false'
    steps:
      - name: Skip build
        run: echo "No new commits since last release. Skipping."
